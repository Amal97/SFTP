package server;

import java.io.*;
import java.net.*;
import java.util.Scanner;
import java.awt.*;
import java.awt.event.*;

public class server {
	
	public String currentDir() {
		return System.getProperty("user.dir");
	}
	
	public String goBackDir() {
		return new File(System.getProperty("user.dir")).getParentFile().toString();
	}
	
	public static void main(String argv[]) throws Exception{
		try {
//			ServerSocket welcomeSocket = new ServerSocket(6789);
//			System.out.println("server 1");
			Account account = new Account();
			MyFiles myFiles = new MyFiles();
//			myFiles.listAllFiles("files");
			while(true) {
//				Socket connectionSocket = welcomeSocket.accept(); 				// only created once its connected
//				System.out.println("server 3");
//
//				
//				BufferedReader inFromClient = 
//						new BufferedReader(new
//						    InputStreamReader(connectionSocket.getInputStream())); 
//				DataOutputStream  outToClient = 
//						new DataOutputStream(connectionSocket.getOutputStream()); 
//				
//				outToClient.writeBytes("+ Amals Server SFTP Service\n");
//				outToClient.flush();
//				
//				String command = inFromClient.readLine().substring(0, 4);
				
				Scanner in = new Scanner(System.in);

				String UserCommand = in.nextLine();
				String command = UserCommand.substring(0, 4);
				
				switch (command) {
					case "USER":
//						String user = inFromClient.readLine().substring(4);
						String user = UserCommand.substring(4);
						if(account.isLoggedIn(user)) {
							System.out.println("!<user-id> logged in");
						}
						else if(account.validUser(user)) {
							System.out.println("+User-id valid, send account and password");
						}
						else {
							System.out.println("-Invalid user-id, try again");
						}
						break;
						
					case "ACCT":
						String accountName = UserCommand.substring(4);

						if(account.isLoggedIn(accountName)) {
							System.out.println("! Account valid, logged-in");
						}
						else if(account.validAccount(accountName)) {
							System.out.println("+Account valid, send password");
						}
						else {
							System.out.println("Invalid account, try again");
						}		
						break;
						
					case "PASS":
						String password = UserCommand.substring(4);
						if(account.alreadyInAccount() && account.validPassword(password)){
							System.out.println("! Logged in");
						}
						else if(!account.alreadyInAccount() && account.validPassword(password)) {
							System.out.println("Password ok but you haven't specified the account\"");
						}
						else {
							System.out.println("-Wrong password, try again");
						}	
						break;
					
					case "TYPE":
						String type = UserCommand.substring(4);
						if(type == "A") {
							System.out.println("+Using Ascii mode");
						}
						else if(type == "B") {
							System.out.println("+Using Binary mode");
						}
						else if(type =="C") {
							System.out.println("+Using Continuous mode");
						}
						else {
							System.out.println("-Type not valid");
						}
						break;
					
					case "LIST":
						String format = UserCommand.substring(5,6);
						String dir = UserCommand.substring(6).trim();
						if(format.contentEquals("F")) {
							String toPrint = myFiles.listAllFiles(dir,"F");
							System.out.println(toPrint);
						}
						else if(format.contentEquals("V")) {
							String toPrint = myFiles.listAllFiles(dir,"V");
							System.out.println(toPrint);
						}
						break;
					
					case "CDIR":
					//	String newDir = UserCommand.substring(5);
						String userDir = System.getProperty("user.dir");
						String upOne = new File(System.getProperty("user.dir")).getParentFile().toString();

						System.out.println(userDir);
						System.out.println(upOne);

						
				}
			}
				
		}catch(Exception ioException) {
			System.out.println("server ERROR");
			ioException.printStackTrace();			
		}
	}

}
